"use client";

import React, {
  createContext,
  useContext,
  useState,
  useEffect,
  ReactNode,
} from "react";

export type Language = "en" | "fa";

interface LanguageContextType {
  language: Language;
  setLanguage: (lang: Language) => void;
  isRTL: boolean;
  t: (key: string) => string;
}

const translations = {
  en: {
    // English translations
crispyMozzarellaSticks: "Special Potato",
crispyMozzarellaSticksDesc: "Fried potato/ Ham/ Cheese/ Mushroom/ Bell pepper",
buffaloWings: "Potato with Alfredo Sauce",
buffaloWingsDesc: "Fried potato/ Alfredo sauce",
loadedNachos: "Potato with Dip",
loadedNachosDesc: "Fried potato/ Special dip",
calamariRings: "Classic Potato",
calamariRingsDesc: "Fried potato/ Special spices/ Salt",
stuffedMushrooms: "Fried Mushroom",
stuffedMushroomsDesc: "Fried button mushroom",

// Main Courses
grilledRibeyeSteak: "Classic Burger",
grilledRibeyeSteakDesc: "Beef burger/ Lettuce/ Tomato/ Pickle/ Special sauce",
herbCrustedSalmon: "Cheese Burger",
herbCrustedSalmonDesc: "Beef burger/ Cheese/ Lettuce/ Tomato/ Pickle/ Special sauce",
chickenParmesan: "Double Burger",
chickenParmesanDesc: "Two beef burgers/ Lettuce/ Tomato/ Pickle/ Special sauce",
lobsterRavioli: "Mushroom Burger",
lobsterRavioliDesc: "Beef burger/ Mushroom/ Tomato/ Pickle/ Lettuce/ Special sauce",
bbqPorkRibs: "Chicken Burger",
bbqPorkRibsDesc: "Chicken burger/ Lettuce/ Tomato/ Pickle/ Special sauce",

// Desserts
chocolateLavaCake: "Chicken Penne",
chocolateLavaCakeDesc: "Penne pasta/ Seasoned chicken/ Alfredo sauce",
newYorkCheesecake: "Beef Penne",
newYorkCheesecakeDesc: "Penne pasta/ Roasted beef/ Alfredo sauce",

// Beverages
freshOrangeJuice: "Soft Drink",
freshOrangeJuiceDesc: "Coca/ Fanta/ Sprite/ Zero",
icedCoffee: "Malt Beverage",
icedCoffeeDesc: "Lemon/ Tropical/ Peach",
fruitSmoothie: "Mineral Water",
fruitSmoothieDesc: "",

// Salads
caesarSalad: "Caesar with Grilled Chicken",
caesarSaladDesc: "Iceberg lettuce/ Grilled chicken fillet/ Toast/ Olives/ Cherry tomatoes/ Parmesan cheese/ Special sauce",

// Soups
tomatoBasilSoup: "Three-Piece Fried Fillet",
tomatoBasilSoupDesc: "(Spicy and regular)/ Served with potato and coleslaw",
chickenNoodleSoup: "Five-Piece Fried Fillet",
chickenNoodleSoupDesc: "(Spicy and regular)/ Served with potato and coleslaw",

// Seafood
grilledLobsterTail: "Garlic & Steak",
grilledLobsterTailDesc: "Beef ribeye steak/ Garlic sauce/ Special sauce/ Cheese",
panSearedScallops: "Roast Beef",
panSearedScallopsDesc: "Roasted beef/ Mushroom/ Cheese/ Special sauce/ Olives",
fishAndChips: "Meat Lover",
fishAndChipsDesc: "Ground beef/ Roast beef/ Chicken/ Bell pepper/ Mushroom/ Cheese/ Special sauce",
seafoodPaella: "Chicken Beef",
seafoodPaellaDesc: "Ribeye beef/ Chicken/ Mushroom/ Special sauce/ Cheese",
blackenedMahiMahi: "Chicken Alfredo",
blackenedMahiMahiDesc: "Marinated chicken/ Alfredo sauce/ Mushroom/ Cheese",
crabCakes: "Mixed",
crabCakesDesc: "Cocktail/ Ham chicken and beef 90/ Mushroom/ Olives/ Bell pepper/ Smoked 90 colorful/ Cheese/ Special sauce",

// Chef Specialties
wagyuBeefTenderloin: "Roast Beef",
wagyuBeefTenderloinDesc: "Beef leg/ Cheese/ Alfredo sauce/ Lettuce/ Green onion/ Tomato/ Pickle",
duckConfit: "Bandari Sausage",
duckConfitDesc: "Bandari sausage dish/ Baguette bread",
rackOfLamb: "Chicken Fillet",
rackOfLambDesc: "Chicken fillet/ Lettuce/ Tomato/ Pickle/ Special sauce",
stuffedPortobello: "Oven-Baked Chicken Ham",
stuffedPortobelloDesc: "Tomato/ Lettuce/ Oven-baked chicken ham 90%/ Pickle/ Special sauce",
surfAndTurf: "Chicken Fillet with Mushroom and Cheese",
surfAndTurfDesc: "Chicken fillet/ Mushroom and cheese/ Lettuce/ Tomato/ Pickle/ Special sauce",
chefsTastingMenu: "Hot Dog with Mushroom and Cheese",
chefsTastingMenuDesc: "Hot dog/ Mushroom and cheese/ Special sauce/ Tomato/ Lettuce/ Pickle",

// Additional Appetizers
garlicBread: "Garlic Bread",
garlicBreadDesc: "Toasted bread with garlic butter and herbs",

// Additional Seafood
salmonTeriyaki: "Vegetables",
salmonTeriyakiDesc: "Eggplant/ Zucchini/ Carrot/ Colorful bell peppers/ Tomato/ Mushroom/ Black olives",
shrimpScampi: "Pepperoni",
shrimpScampiDesc: "Pepperoni/ Special sauce/ Cheese/ Jalape√±o",

// Additional Chef Specialties
ossobuco: "Cold Beef Ham",
ossobucoDesc: "Tomato/ Lettuce/ Beef ham 90%/ Pickle/ Special sauce",
bouillabaisse: "Cold Chicken Ham",
bouillabaisseDesc: "Tomato/ Lettuce/ Chicken ham 90%/ Pickle/ Special sauce",
cobbSalad: "Oven-Baked Beef Ham",
cobbSaladDesc: "Oven-baked beef ham 90%/ Tomato/ Lettuce/ Pickle/ Special sauce",
nicoiseSalad: "Classic Hot Dog",
nicoiseSaladDesc: "Hot dog/ Mustard sauce",
// Additional Default
seasonalSpecialty: "Seasonal specialty with fresh ingredients",
chefRecommended: "Chef's signature recommended dish",
cart: "Cart",
shoppingCart: "Shopping Cart",
cartEmpty: "Your cart is empty",
total: "Total",
clearCart: "Clear Cart",
checkout: "Checkout",
findUs: "Find us and get in touch",
email: "Email",
followUs: "Follow Us",

// Form/Survey translations
customerSurvey: "Customer Survey",
surveyDescription: "Help us improve your dining experience",
surveySubmitted: "Thank you for your feedback!",
submitError: "Error submitting survey. Please try again.",

// Form steps
personalInfo: "Personal Information",
visitInfo: "Visit Information",
ratings: "Rate Your Experience",
feedback: "Your Feedback",
preferences: "Preferences & Marketing",

// Step labels
personal: "Personal",
visit: "Visit",

// Form fields
name: "Name",
email1: "Email",
phone1: "Phone",
ageGroup: "Age Group",
enterName: "Enter your name",
enterEmail: "Enter your email",
enterPhone: "Enter your phone number",
selectAge: "Select age group",
over56: "56+",

// Visit information
visitFrequency: "How often do you visit us?",
firstTime: "First time",
weekly: "Weekly",
monthly: "Monthly",
occasionally: "Occasionally",
rarely: "Rarely",
lastVisit: "When was your last visit?",
partySize: "Party size",
selectPartySize: "Select party size",
sevenPlus: "7+",
occasion: "Occasion",
selectOccasion: "Select occasion",
casual: "Casual dining",
business: "Business meeting",
celebration: "Celebration",
date: "Date night",
family: "Family gathering",

// Ratings
foodQuality: "Food Quality",
serviceQuality: "Service Quality",
atmosphere: "Atmosphere",
valueForMoney: "Value for Money",

// Feedback
mostLiked: "What did you like most?",
describeMostLiked: "Tell us what you enjoyed most about your experience",
improvements: "What could we improve?",
describeImprovements: "Share your suggestions for improvement",
recommendation: "How likely are you to recommend us?",
notLikely: "Not likely",
veryLikely: "Very likely",
additionalComments: "Additional Comments",
shareThoughts: "Share any additional thoughts or comments",

// Preferences
favoriteItems: "Favorite menu items",
dietaryRestrictions: "Dietary restrictions",
vegetarian: "Vegetarian",
vegan: "Vegan",
glutenFree: "Gluten-free",
dairyFree: "Dairy-free",
nutFree: "Nut-free",
halal: "Halal",
kosher: "Kosher",
none: "None",
preferredTime: "Preferred dining time",
selectTime: "Select preferred time",
breakfast: "Breakfast (7-11 AM)",
lunch: "Lunch (11 AM-3 PM)",
dinner: "Dinner (5-10 PM)",
lateNight: "Late night (10 PM+)",

// Marketing
hearAboutUs: "How did you hear about us?",
socialMedia: "Social media",
friendsFamily: "Friends/Family",
onlineSearch: "Online search",
advertisement: "Advertisement",
walkBy: "Walked by",
other: "Other",
subscribeNewsletter: "Subscribe to our newsletter",
receivePromotions: "Receive promotional offers",

// Form actions
previous: "Previous",
next: "Next",
submitSurvey: "Submit Survey",
submitting: "Submitting...",

// Validation messages
nameRequired: "Name is required",
emailRequired: "Email is required",
emailInvalid: "Email is invalid",
visitFrequencyRequired: "Visit frequency is required",
ratingRequired: "Rating is required",
feedbackRequired: "This field is required",
recommendationRequired: "Recommendation rating is required",

// Location & Contact translations
getDirections: "Get Directions",
openInGoogleMaps: "Google Maps",
openInOSM: "OpenStreetMap",
coordinates: "Coordinates",
copyCoordinates: "Click to copy coordinates",
businessHours: "Business Hours",
monday: "Monday",
tuesday: "Tuesday",
wednesday: "Wednesday",
thursday: "Thursday",
friday: "Friday",
saturday: "Saturday",
sunday: "Sunday",
loading: "Loading...",

// Form translations (additional)
surveySubmittedDesc: "Your response has been recorded and will help us improve our service.",
submitAnother: "Submit Another Response",
enterFavoriteItems: "Enter your favorite menu items",
selectOption: "Select an option",

// Size labels
small: "Small",
large: "Large",
unavailable: "Out of Stock",

// Prices (keeping the same format as Persian)
crispyMozzarellaSticksPrice: "208T",
buffaloWingsPrice: "133T",
loadedNachosPrice: "170T",
calamariRingsPrice: "84T",
stuffedMushroomsPrice: "97.5T",
garlicBreadPrice: "119T",
grilledRibeyeSteakPrice: "310T",
herbCrustedSalmonPrice: "306T",
chickenParmesanPrice: "387T",
lobsterRavioliPrice: "264T",
bbqPorkRibsPrice: "216T",
chocolateLavaCakePrice: "320T",
newYorkCheesecakePrice: "370T",
freshOrangeJuicePrice: "$4.99",
icedCoffeePrice: "$3.99",
fruitSmoothiePrice: "$5.99",
caesarSaladPrice: "270T",
tomatoBasilSoupPrice: "289T",
chickenNoodleSoupPrice: "380T",
wagyuBeefTenderloinPrice: "380T",
duckConfitPrice: "220T",
rackOfLambPrice: "220T",
stuffedPortobelloPrice: "220T",
surfAndTurfPrice: "260T",
chefsTastingMenuPrice: "240T",
ossobucoPrice: "180T",
bouillabaissePrice: "190T",
cobbSaladPrice: "230T",
nicoiseSaladPrice: "180T",

// Seafood prices (with sizes)
grilledLobsterTailPriceSmall: "290T",
grilledLobsterTailPriceLarge: "405T",
panSearedScallopsPriceSmall: "326T",
panSearedScallopsPriceLarge: "416T",
fishAndChipsPriceSmall: "305T",
fishAndChipsPriceLarge: "420T",
seafoodPaellaPriceSmall: "220T",
seafoodPaellaPriceLarge: "301T",
blackenedMahiMahiPriceSmall: "185T",
blackenedMahiMahiPriceLarge: "234T",
crabCakesPriceSmall: "162T",
crabCakesPriceLarge: "266T",
salmonTeriyakiPriceSmall: "143T",
salmonTeriyakiPriceLarge: "198T",
shrimpScampiPriceSmall: "170T",
shrimpScampiPriceLarge: "296T",

// Original Price Translation Keys and Values
crispyMozzarellaSticksOriginalPrice: "260T",
buffaloWingsOriginalPrice: "190T",
loadedNachosOriginalPrice: "$15.99",
garlicBreadOriginalPrice: "119T",
calamariRingsOriginalPrice: "140T",
stuffedMushroomsOriginalPrice: "$15.99",
grilledRibeyeSteakOriginalPrice: "$15.99",
herbCrustedSalmonOriginalPrice: "340T",
chickenParmesanOriginalPrice: "430T",
lobsterRavioliOriginalPrice: "330T",
bbqPorkRibsOriginalPrice: "360T",
chocolateLavaCakeOriginalPrice: "$15.99",
newYorkCheesecakeOriginalPrice: "$8.99",
freshOrangeJuiceOriginalPrice: "$15.99",
icedCoffeeOriginalPrice: "$15.99",
fruitSmoothieOriginalPrice: "$7.99",
caesarSaladOriginalPrice: "$15.99",
tomatoBasilSoupOriginalPrice: "340T",
chickenNoodleSoupOriginalPrice: "400T",
grilledLobsterTailOriginalPriceSmall: "$28.99",
grilledLobsterTailOriginalPriceLarge: "450T",
panSearedScallopsOriginalPriceSmall: "326T",
panSearedScallopsOriginalPriceLarge: "520T",
fishAndChipsOriginalPriceSmall: "$18.99",
fishAndChipsOriginalPriceLarge: "600T",
seafoodPaellaOriginalPriceSmall: "$32.99",
seafoodPaellaOriginalPriceLarge: "430T",
blackenedMahiMahiOriginalPriceSmall: "185T",
blackenedMahiMahiOriginalPriceLarge: "390T",
crabCakesOriginalPriceSmall: "$24.99",
crabCakesOriginalPriceLarge: "380T",
salmonTeriyakiOriginalPriceSmall: "143T",
salmonTeriyakiOriginalPriceLarge: "330T",
shrimpScampiOriginalPriceSmall: "$22.99",
shrimpScampiOriginalPriceLarge: "370T",
wagyuBeefTenderloinOriginalPrice: "$15.99",
duckConfitOriginalPrice: "220T",
rackOfLambOriginalPrice: "220T",
stuffedPortobelloOriginalPrice: "220T",
surfAndTurfOriginalPrice: "260T",
chefsTastingMenuOriginalPrice: "$15.99",
ossobucoOriginalPrice: "$15.99",
bouillabaisseOriginalPrice: "190T",
cobbSaladOriginalPrice: "230T",
nicoiseSaladOriginalPrice: "$15.99"

  },
  fa: {
    home: "ÿÆÿßŸÜŸá",
    about: "ŸÖŸÜŸà",
    services: "ÿ™ŸÖÿßÿ≥",
    login: "ÿ´ÿ®ÿ™ ÿ≥ŸÅÿßÿ±ÿ¥",
    signup: "⁄©ÿØ ÿ™ÿÆŸÅ€åŸÅ",
    language: "ÿ≤ÿ®ÿßŸÜ",
    getStarted: "ÿ´ÿ®ÿ™ ÿ≥ŸÅÿßÿ±ÿ¥",
    companyName: "ÿ¥ÿ±⁄©ÿ™ ÿ¥ŸÖÿß",
    location: "ŸÖŸàŸÇÿπ€åÿ™",
    address: "ÿÆ€åÿßÿ®ÿßŸÜ ÿßÿµŸÑ€å €±€≤€≥ÿå ÿ¥Ÿáÿ±ÿå ⁄©ÿ¥Ÿàÿ±",
    address1: "ÿ¢ÿØÿ±ÿ≥",
    postalCode: "⁄©ÿØ Ÿæÿ≥ÿ™€å: €±€≤€≥€¥€µ",
    phone: "€∞€π€±€≤€≥€¥€µ€∂€∑€∏€π",
    phone2: "€∞€≤€±€±€≤€≥€¥€µ€∂€∑€∏",
    contactUs: "ÿ™ŸÖÿßÿ≥ ÿ®ÿß ŸÖÿß",
    sendMessage: "ÿßÿ±ÿ≥ÿßŸÑ Ÿæ€åÿßŸÖ",
    support: "ŸÖÿ±⁄©ÿ≤ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å",
    allRightsReserved: "ÿ™ŸÖÿßŸÖ€å ÿ≠ŸÇŸàŸÇ ŸÖÿ≠ŸÅŸàÿ∏ ÿßÿ≥ÿ™.",
    privacy: "ÿ≠ÿ±€åŸÖ ÿÆÿµŸàÿµ€å",
    terms: "ÿ¥ÿ±ÿß€åÿ∑ ÿÆÿØŸÖÿßÿ™",
    ourMenu: "ŸÖŸÜŸà€å ŸÖÿß",
    appetizers: "Ÿæ€åÿ¥ ÿ∫ÿ∞ÿß",
    mainCourses: "ÿ®ÿ±⁄Øÿ±",
    desserts: "Ÿæÿßÿ≥ÿ™ÿß",
    beverages: "ŸÜŸàÿ¥€åÿØŸÜ€å",
    salads: "ÿ≥ÿßŸÑÿßÿØ",
    soups: "ŸÖÿ±ÿ∫ ÿ≥ŸàÿÆÿßÿ±€å",
    seafood: "Ÿæ€åÿ™ÿ≤ÿß",
    specialties: "ÿ≥ÿßŸÜÿØŸà€å⁄Ü",
    viewMenu: "ŸÖÿ¥ÿßŸáÿØŸá ŸÖŸÜŸà",
    backToMenu: "ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ ÿ®Ÿá ŸÖŸÜŸà",
    exploreOur: "⁄©ÿßŸàÿ¥ ⁄©ŸÜ€åÿØ",
    orderNow: "ÿ≥ŸÅÿßÿ±ÿ¥ ÿØŸá€åÿØ",
    menuSubtitle: "ŸÖÿ¨ŸÖŸàÿπŸá‚Äåÿß€å ÿßÿ≤ ÿ∫ÿ∞ÿßŸáÿß€å ÿÆŸàÿ¥ŸÖÿ≤Ÿá Ÿà ÿ®ÿß ÿØŸÇÿ™ ÿ™Ÿá€åŸá ÿ¥ÿØŸá ÿ±ÿß ⁄©ÿ¥ŸÅ ⁄©ŸÜ€åÿØ",
    crispyMozzarellaSticks: "ÿ≥€åÿ® ÿ≤ŸÖ€åŸÜ€å Ÿà€å⁄òŸá",
    crispyMozzarellaSticksDesc: "ÿ≥€åÿ® ÿ≤ŸÖ€åŸÜ€å ÿ≥ÿ±ÿÆ ÿ¥ÿØŸá/ ⁄òÿßŸÖÿ®ŸàŸÜ/ ŸæŸÜ€åÿ±/ ŸÇÿßÿ±⁄Ü/ŸÅŸÑŸÅŸÑ ÿØŸÑŸÖŸá",
    buffaloWings: "ÿ≥€åÿ® ÿ≤ŸÖ€åŸÜ€å ÿ®ÿß ÿ≥ÿ≥ ÿ¢ŸÑŸÅÿ±ÿØŸà",
    buffaloWingsDesc: "ÿ≥€åÿ® ÿ≤ŸÖ€åŸÜ€å ÿ≥ÿ±ÿÆ ÿ¥ÿØŸá/ ÿ≥ÿ≥ ÿ¢ŸÑŸÅÿ±ÿØŸà",
    loadedNachos: "ÿ≥€åÿ® ÿ≤ŸÖ€åŸÜ€å ÿ®ÿß ÿØ€åŸæ",
    loadedNachosDesc: "ÿ≥€åÿ® ÿ≤ŸÖ€åŸÜ€å ÿ≥ÿ±ÿÆ ÿ¥ÿØŸá/ ÿØ€åŸæ ŸÖÿÆÿµŸàÿµ",
    calamariRings: "ÿ≥€åÿ® ÿ≤ŸÖ€åŸÜ€å ⁄©ŸÑÿßÿ≥€å⁄©",
    calamariRingsDesc: "ÿ≥€åÿ® ÿ≤ŸÖ€åŸÜ€å ÿ≥ÿ±ÿÆ ÿ¥ÿØŸá/ ÿßÿØŸà€åŸá ŸÖÿÆÿµŸàÿµ/ŸÜŸÖ⁄©",
    stuffedMushrooms: "ŸÇÿßÿ±⁄Ü ÿ≥ŸàÿÆÿßÿ±Ÿä",
    stuffedMushroomsDesc: "ŸÇÿßÿ±⁄Ü ÿØ⁄©ŸÖŸá‚Äåÿß€å ÿ≥ÿ±ÿÆ ÿ¥ÿØŸá",

    // Main Courses
    grilledRibeyeSteak: "ÿ®ÿ±⁄Øÿ± ⁄©ŸÑÿßÿ≥€å⁄©",
    grilledRibeyeSteakDesc: "ÿ®ÿ±⁄Øÿ± ⁄ØŸàÿ¥ÿ™/ ⁄©ÿßŸáŸà/ ⁄ØŸàÿ¨Ÿá/ ÿÆ€åÿßÿ±ÿ¥Ÿàÿ±/ ÿ≥ÿ≥ ŸÖÿÆÿµŸàÿµ",
    herbCrustedSalmon: "⁄Ü€åÿ≤ ÿ®ÿ±⁄Øÿ±",
    herbCrustedSalmonDesc: "ÿ®ÿ±⁄Øÿ± ⁄ØŸàÿ¥ÿ™/ ŸæŸÜ€åÿ±/ ⁄©ÿßŸáŸà/ ⁄ØŸàÿ¨Ÿá/ ÿÆ€åÿßÿ±ÿ¥Ÿàÿ±/ ÿ≥ÿ≥ ŸÖÿÆÿµŸàÿµ",
    chickenParmesan: "ÿØÿ®ŸÑ ÿ®ÿ±⁄Øÿ±",
    chickenParmesanDesc: "ÿØŸà ÿπÿØÿØ ÿ®ÿ±⁄Øÿ± ⁄ØŸàÿ¥ÿ™/ ⁄©ÿßŸáŸà/ ⁄ØŸàÿ¨Ÿá/ ÿÆ€åÿßÿ±ÿ¥Ÿàÿ±/ ÿ≥ÿ≥ ŸÖÿÆÿµŸàÿµ",
    lobsterRavioli: "ŸÇÿßÿ±⁄Ü ÿ®ÿ±⁄Øÿ±",
    lobsterRavioliDesc: "ÿ®ÿ±⁄Øÿ± ⁄ØŸàÿ¥ÿ™/ ŸÇÿßÿ±⁄Ü/ ⁄ØŸàÿ¨Ÿá/ ÿÆ€åÿßÿ±ÿ¥Ÿàÿ±/ ⁄©ÿßŸáŸà/ ÿ≥ÿ≥ ŸÖÿÆÿµŸàÿµ",
    bbqPorkRibs: "⁄Ü€å⁄©ŸÜ ÿ®ÿ±⁄Øÿ±",
    bbqPorkRibsDesc: "ÿ®ÿ±⁄Øÿ± ŸÖÿ±ÿ∫/ ⁄©ÿßŸáŸà/ ⁄ØŸàÿ¨Ÿá/ ÿÆ€åÿßÿ±ÿ¥Ÿàÿ±/ ÿ≥ÿ≥ ŸÖÿÆÿµŸàÿµ",

    // Desserts
    chocolateLavaCake: "ŸæŸÜŸá ŸÖÿ±ÿ∫",
    chocolateLavaCakeDesc: "Ÿæÿßÿ≥ÿ™ÿß ŸæŸÜŸá/ ŸÖÿ±ÿ∫ ŸÖÿ≤Ÿá ÿØÿßÿ± ÿ¥ÿØŸá/ ÿ≥ÿ≥ ÿ¢ŸÑŸÅÿ±ÿØŸà",
    newYorkCheesecake: "ŸæŸÜŸá ⁄ØŸàÿ¥ÿ™",
    newYorkCheesecakeDesc: "Ÿæÿßÿ≥ÿ™ÿß ŸæŸÜŸá/ ⁄ØŸàÿ¥ÿ™ ⁄ØŸàÿ≥ÿßŸÑŸá ÿ±ÿ≥ÿ™ ÿ¥ÿØŸá/ ÿ≥ÿ≥ ÿ¢ŸÑŸÅÿ±ÿØŸà",

    // Beverages
    freshOrangeJuice: "ŸÜŸàÿ¥ÿßÿ®Ÿá",
    freshOrangeJuiceDesc: "⁄©Ÿà⁄©ÿß/ ŸÅÿßŸÜÿ™ÿß/ ÿßÿ≥Ÿæÿ±ÿß€åÿ™/ ÿ≤€åÿ±Ÿà",
    icedCoffee: "ŸÖÿßÿ°ÿßŸÑÿ¥ÿπ€åÿ±",
    icedCoffeeDesc: "ŸÑ€åŸÖŸà/ ÿßÿ≥ÿ™Ÿàÿß€å€å/ ŸáŸÑŸà",
    fruitSmoothie: "ÿ¢ÿ® ŸÖÿπÿØŸÜ€å",
    fruitSmoothieDesc: "",

    // Salads
    caesarSalad: "ÿ≥ÿ≤ÿßÿ± ÿ®ÿß ŸÖÿ±ÿ∫ ⁄Øÿ±€åŸÑ",
    caesarSaladDesc: "⁄©ÿßŸáŸà Ÿæ€å⁄Ü/ ŸÅ€åŸÑŸá ŸÖÿ±ÿ∫ ⁄Øÿ±€åŸÑ/ ŸÜÿßŸÜ ÿ™ÿ≥ÿ™/ ÿ≤€åÿ™ŸàŸÜ/⁄ØŸàÿ¨Ÿá ⁄Ø€åŸÑÿßÿ≥€å/ ŸæŸÜ€åÿ± Ÿæÿßÿ±ŸÖÿ≥ÿßŸÜ/ÿ≥ÿ≥ ŸÖÿÆÿµŸàÿµ",

    // Soups
    tomatoBasilSoup: "ŸÅ€åŸÑŸá ÿ≥ŸàÿÆÿßÿ±Ÿä ÿ≥Ÿá ÿ™€å⁄©Ÿá",
    tomatoBasilSoupDesc: "( ÿßÿ≥Ÿæÿß€åÿ≥€å Ÿà ŸÖÿπŸÖŸàŸÑ€å )/ ÿ®Ÿá ŸáŸÖÿ±ÿßŸá ÿ≥€åÿ® ÿ≤ŸÖ€åŸÜ€å Ÿà ÿ≥ÿßŸÑÿßÿØ ⁄©ŸÑŸÖ",
    chickenNoodleSoup: "ŸÅ€åŸÑŸá ÿ≥ŸàÿÆÿßÿ±Ÿä ŸæŸÜÿ¨ ÿ™€å⁄©Ÿá",
    chickenNoodleSoupDesc: "( ÿßÿ≥Ÿæÿß€åÿ≥€å Ÿà ŸÖÿπŸÖŸàŸÑ€å )/ ÿ®Ÿá ŸáŸÖÿ±ÿßŸá ÿ≥€åÿ® ÿ≤ŸÖ€åŸÜ€å Ÿà ÿ≥ÿßŸÑÿßÿØ ⁄©ŸÑŸÖ",

    // Seafood
    grilledLobsterTail: "ÿ≥€åÿ± Ÿà ÿßÿ≥ÿ™€å⁄©",
    grilledLobsterTailDesc: "ÿßÿ≥ÿ™€å⁄© ÿ±ÿßÿ≥ÿ™Ÿá ⁄ØŸàÿ≥ÿßŸÑŸá/ ÿ≠ÿ±€åÿ± ÿ≥€åÿ±/ÿ≥ÿ≥ ŸÖÿÆÿµŸàÿµ/ ŸæŸÜ€åÿ±",
    panSearedScallops: "ÿ±ÿ≥ÿ™ ÿ®€åŸÅ",
    panSearedScallopsDesc: "⁄ØŸàÿ¥ÿ™ ÿ±ÿ≥ÿ™ ÿ¥ÿØŸá/ ŸÇÿßÿ±⁄Ü/ ŸæŸÜ€åÿ±/ÿ≥ÿ≥ ŸÖÿÆÿµŸàÿµ/ ÿ≤€åÿ™ŸàŸÜ",
    fishAndChips: "ŸÖ€åÿ™ ŸÑÿßŸàÿ±",
    fishAndChipsDesc: "⁄ØŸàÿ¥ÿ™ ⁄Üÿ±ÿÆ ⁄©ÿ±ÿØŸá/ ÿ±ÿ≥ÿ™ ÿ®€åŸÅ/⁄Ü€å⁄©ŸÜ/ ŸÅŸÑŸÅŸÑ ÿØŸÑŸÖŸá/ ŸÇÿßÿ±⁄Ü/ ŸæŸÜ€åÿ±/ÿ≥ÿ≥ ŸÖÿÆÿµŸàÿµ",
    seafoodPaella: "⁄Ü€å⁄©ŸÜ ÿ®€åŸÅ",
    seafoodPaellaDesc: "⁄ØŸàÿ¥ÿ™ ÿ±ÿßÿ≥ÿ™Ÿá/ ⁄Ü€å⁄©ŸÜ/ ŸÇÿßÿ±⁄Ü/ÿ≥ÿ≥ ŸÖÿÆÿµŸàÿµ/ ŸæŸÜ€åÿ±",
    blackenedMahiMahi: "⁄Ü€å⁄©ŸÜ ÿ¢ŸÑŸÅÿ±ÿØŸà",
    blackenedMahiMahiDesc: "ŸÖÿ±ÿ∫ ŸÖÿ±€åŸÜÿ™ ÿ¥ÿØŸá/ ÿ≥ÿ≥ ÿ¢ŸÑŸÅÿ±ÿØŸà/ŸÇÿßÿ±⁄Ü/ ŸæŸÜ€åÿ±",
    crabCakes: "ŸÖÿÆŸÑŸàÿ∑",
    crabCakesDesc: "⁄©Ÿà⁄©ÿ™ŸÑ / ⁄òÿßŸÖÿ®ŸàŸÜ ŸÖÿ±ÿ∫ Ÿà ⁄ØŸàÿ¥ÿ™ 90/ ŸÇÿßÿ±⁄Ü/ ÿ≤€åÿ™ŸàŸÜ/ ŸÅŸÑŸÅŸÑ ÿØŸÑŸÖŸá/ ÿØŸàÿØŸä 90ÿ±ŸÜ⁄Ø€å/ ŸæŸÜ€åÿ±/ ÿ≥ÿ≥ ŸÖÿÆÿµŸàÿµ",

    // Chef Specialties
    wagyuBeefTenderloin: "ÿ±ÿ≥ÿ™ ÿ®€åŸÅ",
    wagyuBeefTenderloinDesc: "ŸÖÿ∫ÿ≤ ÿ±ÿßŸÜ ⁄ØŸàÿ≥ÿßŸÑŸá/ ŸæŸÜ€åÿ±/ ÿ≥ÿ≥ ÿ¢ŸÑŸÅÿ±ÿØŸà/ ⁄©ÿßŸáŸà/ Ÿæ€åÿßÿ≤ ÿ¨ÿπŸÅÿ±Ÿä/⁄ØŸàÿ¨Ÿá/ ÿÆ€åÿßÿ±ÿ¥Ÿàÿ±",
    duckConfit: "ÿ≥Ÿàÿ≥€åÿ≥ ÿ®ŸÜÿØÿ±Ÿä",
    duckConfitDesc: "ÿÆŸàÿ±ÿßŸÉ ÿ≥Ÿàÿ≥€åÿ≥ ÿ®ŸÜÿØÿ±Ÿä/ ŸÜÿßŸÜ ÿ®ÿß⁄Øÿ™",
    rackOfLamb: "ŸÅ€åŸÑŸá ŸÖÿ±ÿ∫",
    rackOfLambDesc: "ŸÅ€åŸÑŸá ŸÖÿ±ÿ∫/ ⁄©ÿßŸáŸà/ ⁄ØŸàÿ¨Ÿá/ ÿÆ€åÿßÿ± ÿ¥Ÿàÿ±/ÿ≥ÿ≥ ŸÖÿÆÿµŸàÿµ",
    stuffedPortobello: "⁄òÿßŸÖÿ®ŸàŸÜ ÿ™ŸÜŸàÿ±Ÿä ŸÖÿ±ÿ∫",
    stuffedPortobelloDesc: "⁄ØŸàÿ¨Ÿá/ ⁄©ÿßŸáŸà/ ⁄òÿßŸÖÿ®ŸàŸÜ ŸÖÿ±ÿ∫ ÿ™ŸÜŸàÿ±Ÿä %90 /ÿÆ€åÿßÿ±ÿ¥Ÿàÿ±/ ÿ≥ÿ≥ ŸÖÿÆÿµŸàÿµ",
    surfAndTurf: "ŸÅ€åŸÑŸá ŸÖÿ±ÿ∫ ÿ®ÿß ŸÇÿßÿ±⁄Ü Ÿà ŸæŸÜ€åÿ±",
    surfAndTurfDesc: "ŸÅ€åŸÑŸá ŸÖÿ±ÿ∫/ ŸÇÿßÿ±⁄Ü Ÿà ŸæŸÜ€åÿ±/ ⁄©ÿßŸáŸà/⁄ØŸàÿ¨Ÿá/ ÿÆ€åÿßÿ± ÿ¥Ÿàÿ±/ ÿ≥ÿ≥ ŸÖÿÆÿµŸàÿµ",
    chefsTastingMenu: "Ÿáÿßÿ™ ÿØÿß⁄Ø ÿ®ÿß ŸÇÿßÿ±⁄Ü Ÿà ŸæŸÜ€åÿ±",
    chefsTastingMenuDesc: "Ÿáÿßÿ™ ÿØÿß⁄Ø/ ŸÇÿßÿ±⁄Ü Ÿà ŸæŸÜ€åÿ±/ ÿ≥ÿ≥ ŸÖÿÆÿµŸàÿµ/ ⁄ØŸàÿ¨Ÿá/ ⁄©ÿßŸáŸà/ÿÆ€åÿßÿ±ÿ¥Ÿàÿ±",

    // Default items
    deliciousAndFresh: "ŸÖŸàÿßÿØ ÿ™ÿßÿ≤Ÿá Ÿà ÿÆŸàÿ¥ŸÖÿ≤Ÿá",
    chefsSpecialRecommendation: "Ÿæ€åÿ¥ŸÜŸáÿßÿØ Ÿà€å⁄òŸá ÿ≥ÿ±ÿ¢ÿ¥Ÿæÿ≤",
    premiumQualityIngredients: "ŸÖŸàÿßÿØ ÿ®ÿß ⁄©€åŸÅ€åÿ™ ÿØÿ±ÿ¨Ÿá €å⁄©",
    popularChoiceAmongCustomers: "ÿßŸÜÿ™ÿÆÿßÿ® ŸÖÿ≠ÿ®Ÿàÿ® ŸÖÿ¥ÿ™ÿ±€åÿßŸÜ",
    traditionalRecipeWithModernTwist: "ÿØÿ≥ÿ™Ÿàÿ± ÿ≥ŸÜÿ™€å ÿ®ÿß ŸÑŸÖÿ≥ ŸÖÿØÿ±ŸÜ",
    lightAndHealthyOption: "⁄Øÿ≤€åŸÜŸá ÿ≥ÿ®⁄© Ÿà ÿ≥ÿßŸÑŸÖ",

    // Additional Appetizers
    garlicBread: "ŸÜÿßŸÜ ÿ≥€åÿ±",
    garlicBreadDesc: "ŸÜÿßŸÜ ÿ®ÿ±ÿ¥ÿ™Ÿá ÿ¥ÿØŸá ÿ®ÿß ⁄©ÿ±Ÿá ÿ≥€åÿ± Ÿà ÿ≥ÿ®ÿ≤€åÿ¨ÿßÿ™",

    // Additional Seafood
    salmonTeriyaki: "ÿ≥ÿ®ÿ≤€åÿ¨ÿßÿ™",
    salmonTeriyakiDesc: "ÿ®ÿßÿØŸÖÿ¨ÿßŸÜ/ ⁄©ÿØŸà/ ŸáŸà€åÿ¨/ ŸÅŸÑŸÅŸÑ ÿØŸÑŸÖŸá ÿ±ŸÜ⁄Ø€å/ ⁄ØŸàÿ¨Ÿá/ ŸÇÿßÿ±⁄Ü/ ÿ≤€åÿ™ŸàŸÜ ÿ≥€åÿßŸá",
    shrimpScampi: "ŸæŸæÿ±ŸàŸÜ€å",
    shrimpScampiDesc: "ŸæŸæÿ±ŸàŸÜ€å/ ÿ≥ÿ≥ ŸÖÿÆÿµŸàÿµ/ ŸæŸÜ€åÿ±/ŸáÿßŸÑŸàŸæ€åŸÜŸà",

    // Additional Chef Specialties
    ossobuco: "⁄òÿßŸÖÿ®ŸàŸÜ ⁄ØŸàÿ¥ÿ™ ÿ≥ÿ±ÿØ",
    ossobucoDesc: "⁄ØŸàÿ¨Ÿá/ ⁄©ÿßŸáŸà/ ⁄òÿßŸÖÿ®ŸàŸÜ ⁄ØŸàÿ¥ÿ™ %90/ÿÆ€åÿßÿ±ÿ¥Ÿàÿ±/ ÿ≥ÿ≥ ŸÖÿÆÿµŸàÿµ",
    bouillabaisse: "⁄òÿßŸÖÿ®ŸàŸÜ ŸÖÿ±ÿ∫ ÿ≥ÿ±ÿØ",
    bouillabaisseDesc: "⁄ØŸàÿ¨Ÿá/ ⁄©ÿßŸáŸà/⁄òÿßŸÖÿ®ŸàŸÜ ŸÖÿ±ÿ∫ %90/ÿÆ€åÿßÿ±ÿ¥Ÿàÿ±/ ÿ≥ÿ≥ ŸÖÿÆÿµŸàÿµ",
    // Salad names and descriptions
cobbSalad: "⁄òÿßŸÖÿ®ŸàŸÜ ÿ™ŸÜŸàÿ±Ÿä ⁄ØŸàÿ¥ÿ™",
cobbSaladDesc: "⁄òÿßŸÖÿ®ŸàŸÜ ÿ™ŸÜŸàÿ±Ÿä ⁄ØŸàÿ¥ÿ™ %90/⁄ØŸàÿ¨Ÿá/ ⁄©ÿßŸáŸà/ ÿÆ€åÿßÿ±ÿ¥Ÿàÿ±/ÿ≥ÿ≥ ŸÖÿÆÿµŸàÿµ",
nicoiseSalad: "Ÿáÿßÿ™ ÿØÿß⁄Ø ⁄©ŸÑÿßÿ≥€å⁄©",
nicoiseSaladDesc: "Ÿáÿßÿ™ ÿØÿß⁄Ø/ ÿ≥ÿ≥ ÿÆÿ±ÿØŸÑ",


    // Additional Default
    seasonalSpecialty: "ÿ™ÿÆÿµÿµ ŸÅÿµŸÑ€å ÿ®ÿß ŸÖŸàÿßÿØ ÿ™ÿßÿ≤Ÿá",
    chefRecommended: "ÿ∫ÿ∞ÿß€å ÿßŸÖÿ∂ÿß Ÿæ€åÿ¥ŸÜŸáÿßÿØ€å ÿ≥ÿ±ÿ¢ÿ¥Ÿæÿ≤",
    cart: "ÿ≥ÿ®ÿØ ÿÆÿ±€åÿØ",
    shoppingCart: "ÿ≥ÿ®ÿØ ÿÆÿ±€åÿØ",
    cartEmpty: "ÿ≥ÿ®ÿØ ÿÆÿ±€åÿØ ÿ¥ŸÖÿß ÿÆÿßŸÑ€å ÿßÿ≥ÿ™",
    total: "ŸÖÿ¨ŸÖŸàÿπ",
    clearCart: "Ÿæÿß⁄© ⁄©ÿ±ÿØŸÜ ÿ≥ÿ®ÿØ",
    checkout: "Ÿæÿ±ÿØÿßÿÆÿ™",
    findUs: "ŸÖÿß ÿ±ÿß Ÿæ€åÿØÿß ⁄©ŸÜ€åÿØ Ÿà ÿØÿ± ÿ™ŸÖÿßÿ≥ ÿ®ÿßÿ¥€åÿØ",
    email: "ÿß€åŸÖ€åŸÑ",
    followUs: "ŸÖÿß ÿ±ÿß ÿØŸÜÿ®ÿßŸÑ ⁄©ŸÜ€åÿØ",
    // Form/Survey translations
    customerSurvey: "ŸÜÿ∏ÿ±ÿ≥ŸÜÿ¨€å ŸÖÿ¥ÿ™ÿ±€åÿßŸÜ",
    surveyDescription: "ÿ®Ÿá ŸÖÿß ⁄©ŸÖ⁄© ⁄©ŸÜ€åÿØ ÿ™ÿß ÿ™ÿ¨ÿ±ÿ®Ÿá ÿ∫ÿ∞ÿßÿÆŸàÿ±€å ÿ¥ŸÖÿß ÿ±ÿß ÿ®Ÿáÿ®ŸàÿØ ÿØŸá€åŸÖ",
    surveySubmitted: "ÿßÿ≤ ÿ®ÿßÿ≤ÿÆŸàÿ±ÿØ ÿ¥ŸÖÿß ŸÖÿ™ÿ¥⁄©ÿ±€åŸÖ!",
    submitError: "ÿÆÿ∑ÿß ÿØÿ± ÿßÿ±ÿ≥ÿßŸÑ ŸÜÿ∏ÿ±ÿ≥ŸÜÿ¨€å. ŸÑÿ∑ŸÅÿßŸã ÿØŸàÿ®ÿßÿ±Ÿá ÿ™ŸÑÿßÿ¥ ⁄©ŸÜ€åÿØ.",

    // Form steps
    personalInfo: "ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ¥ÿÆÿµ€å",
    visitInfo: "ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ®ÿßÿ≤ÿØ€åÿØ",
    ratings: "ÿßŸÖÿ™€åÿßÿ≤ ÿØŸá€å ÿ®Ÿá ÿ™ÿ¨ÿ±ÿ®Ÿá ÿ¥ŸÖÿß",
    feedback: "ÿ®ÿßÿ≤ÿÆŸàÿ±ÿØ ÿ¥ŸÖÿß",
    preferences: "ÿ™ÿ±ÿ¨€åÿ≠ÿßÿ™ Ÿà ÿ®ÿßÿ≤ÿßÿ±€åÿßÿ®€å",

    // Step labels
    personal: "ÿ¥ÿÆÿµ€å",
    visit: "ÿ®ÿßÿ≤ÿØ€åÿØ",

    // Form fields
    name: "ŸÜÿßŸÖ",
    email1: "ÿß€åŸÖ€åŸÑ",
    phone1: "ÿ™ŸÑŸÅŸÜ",
    ageGroup: "⁄Øÿ±ŸàŸá ÿ≥ŸÜ€å",
    enterName: "ŸÜÿßŸÖ ÿÆŸàÿØ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ",
    enterEmail: "ÿß€åŸÖ€åŸÑ ÿÆŸàÿØ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ",
    enterPhone: "ÿ¥ŸÖÿßÿ±Ÿá ÿ™ŸÑŸÅŸÜ ÿÆŸàÿØ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ",
    selectAge: "⁄Øÿ±ŸàŸá ÿ≥ŸÜ€å ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ",
    over56: "€µ€∂+",

    // Visit information
    visitFrequency: "⁄ÜŸÜÿØ ŸàŸÇÿ™ €å⁄©ÿ®ÿßÿ± ÿßÿ≤ ŸÖÿß ÿ®ÿßÿ≤ÿØ€åÿØ ŸÖ€å‚Äå⁄©ŸÜ€åÿØÿü",
    firstTime: "ÿßŸàŸÑ€åŸÜ ÿ®ÿßÿ±",
    weekly: "ŸáŸÅÿ™⁄Ø€å",
    monthly: "ŸÖÿßŸáÿßŸÜŸá",
    occasionally: "⁄ØÿßŸá€å ÿßŸàŸÇÿßÿ™",
    rarely: "ÿ®Ÿá ŸÜÿØÿ±ÿ™",
    lastVisit: "ÿ¢ÿÆÿ±€åŸÜ ÿ®ÿßÿ≤ÿØ€åÿØ ÿ¥ŸÖÿß ⁄©€å ÿ®ŸàÿØÿü",
    partySize: "ÿ™ÿπÿØÿßÿØ ÿßŸÅÿ±ÿßÿØ",
    selectPartySize: "ÿ™ÿπÿØÿßÿØ ÿßŸÅÿ±ÿßÿØ ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ",
    sevenPlus: "€∑+",
    occasion: "ŸÖŸÜÿßÿ≥ÿ®ÿ™",
    selectOccasion: "ŸÖŸÜÿßÿ≥ÿ®ÿ™ ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ",
    casual: "ÿ∫ÿ∞ÿßÿÆŸàÿ±€å ŸÖÿπŸÖŸàŸÑ€å",
    business: "ÿ¨ŸÑÿ≥Ÿá ⁄©ÿßÿ±€å",
    celebration: "ÿ¨ÿ¥ŸÜ",
    date: "ŸÇÿ±ÿßÿ± ÿπÿßÿ¥ŸÇÿßŸÜŸá",
    family: "⁄Øÿ±ÿØŸáŸÖÿß€å€å ÿÆÿßŸÜŸàÿßÿØ⁄Ø€å",

    // Ratings
    foodQuality: "⁄©€åŸÅ€åÿ™ ÿ∫ÿ∞ÿß",
    serviceQuality: "⁄©€åŸÅ€åÿ™ ÿ≥ÿ±Ÿà€åÿ≥",
    atmosphere: "ŸÅÿ∂ÿß",
    valueForMoney: "ÿßÿ±ÿ≤ÿ¥ ÿØÿ± ÿ®ÿ±ÿßÿ®ÿ± ŸæŸàŸÑ",

    // Feedback
    mostLiked: "ÿ®€åÿ¥ÿ™ÿ±€åŸÜ ⁄Ü€åÿ≤€å ⁄©Ÿá ÿØŸàÿ≥ÿ™ ÿØÿßÿ¥ÿ™€åÿØ ⁄ÜŸá ÿ®ŸàÿØÿü",
    describeMostLiked: "ÿ®⁄ØŸà€å€åÿØ ÿ®€åÿ¥ÿ™ÿ±€åŸÜ ŸÑÿ∞ÿ™ ÿ±ÿß ÿßÿ≤ ⁄ÜŸá ⁄Ü€åÿ≤€å ÿØÿ± ÿ™ÿ¨ÿ±ÿ®Ÿá‚Äåÿ™ÿßŸÜ ÿ®ÿ±ÿØ€åÿØ",
    improvements: "⁄ÜŸá ⁄Ü€åÿ≤€å ÿ±ÿß ŸÖ€å‚Äåÿ™ŸàÿßŸÜ€åŸÖ ÿ®Ÿáÿ®ŸàÿØ ÿØŸá€åŸÖÿü",
    describeImprovements: "Ÿæ€åÿ¥ŸÜŸáÿßÿØÿßÿ™ ÿÆŸàÿØ ÿ®ÿ±ÿß€å ÿ®Ÿáÿ®ŸàÿØ ÿ±ÿß ÿ®ÿß ŸÖÿß ÿØÿ± ŸÖ€åÿßŸÜ ÿ®⁄Øÿ∞ÿßÿ±€åÿØ",
    recommendation: "⁄ÜŸÇÿØÿ± ÿßÿ≠ÿ™ŸÖÿßŸÑ ÿØÿßÿ±ÿØ ŸÖÿß ÿ±ÿß ÿ™Ÿàÿµ€åŸá ⁄©ŸÜ€åÿØÿü",
    notLikely: "ÿßÿ≠ÿ™ŸÖÿßŸÑ ⁄©ŸÖ",
    veryLikely: "ÿßÿ≠ÿ™ŸÖÿßŸÑ ÿ≤€åÿßÿØ",
    additionalComments: "ŸÜÿ∏ÿ±ÿßÿ™ ÿßÿ∂ÿßŸÅ€å",
    shareThoughts: "Ÿáÿ± ŸÜÿ∏ÿ± €åÿß Ÿæ€åÿ¥ŸÜŸáÿßÿØ ÿßÿ∂ÿßŸÅ€å ÿ±ÿß ÿ®ÿß ŸÖÿß ÿØÿ± ŸÖ€åÿßŸÜ ÿ®⁄Øÿ∞ÿßÿ±€åÿØ",

    // Preferences
    favoriteItems: "ÿ¢€åÿ™ŸÖ‚ÄåŸáÿß€å ŸÖŸàÿ±ÿØ ÿπŸÑÿßŸÇŸá ŸÖŸÜŸà",
    dietaryRestrictions: "ŸÖÿ≠ÿØŸàÿØ€åÿ™‚ÄåŸáÿß€å ÿ∫ÿ∞ÿß€å€å",
    vegetarian: "⁄Ø€åÿßŸáÿÆŸàÿßÿ±",
    vegan: "Ÿà⁄ØÿßŸÜ",
    glutenFree: "ÿ®ÿØŸàŸÜ ⁄ØŸÑŸàÿ™ŸÜ",
    dairyFree: "ÿ®ÿØŸàŸÜ ŸÑÿ®ŸÜ€åÿßÿ™",
    nutFree: "ÿ®ÿØŸàŸÜ ÿ¢ÿ¨€åŸÑ",
    halal: "ÿ≠ŸÑÿßŸÑ",
    kosher: "⁄©Ÿàÿ¥ÿ±",
    none: "Ÿá€å⁄Ü",
    preferredTime: "ÿ≤ŸÖÿßŸÜ ÿ™ÿ±ÿ¨€åÿ≠€å ÿ∫ÿ∞ÿßÿÆŸàÿ±€å",
    selectTime: "ÿ≤ŸÖÿßŸÜ ÿ™ÿ±ÿ¨€åÿ≠€å ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ",
    breakfast: "ÿµÿ®ÿ≠ÿßŸÜŸá (€∑-€±€± ÿµÿ®ÿ≠)",
    lunch: "ŸÜÿßŸáÿßÿ± (€±€± ÿµÿ®ÿ≠-€≥ ÿ®ÿπÿØÿßÿ≤ÿ∏Ÿáÿ±)",
    dinner: "ÿ¥ÿßŸÖ (€µ-€±€∞ ÿ¥ÿ®)",
    lateNight: "ÿ¥ÿ® ÿØ€åÿ± (€±€∞ ÿ¥ÿ®+)",

    // Marketing
    hearAboutUs: "⁄Üÿ∑Ÿàÿ± ÿßÿ≤ ŸÖÿß ÿ®ÿßÿÆÿ®ÿ± ÿ¥ÿØ€åÿØÿü",
    socialMedia: "ÿ¥ÿ®⁄©Ÿá‚ÄåŸáÿß€å ÿßÿ¨ÿ™ŸÖÿßÿπ€å",
    friendsFamily: "ÿØŸàÿ≥ÿ™ÿßŸÜ/ÿÆÿßŸÜŸàÿßÿØŸá",
    onlineSearch: "ÿ¨ÿ≥ÿ™ÿ¨Ÿà€å ÿ¢ŸÜŸÑÿß€åŸÜ",
    advertisement: "ÿ™ÿ®ŸÑ€åÿ∫ÿßÿ™",
    walkBy: "ÿßÿ≤ ⁄©ŸÜÿßÿ± ÿ±ÿØ ÿ¥ÿØŸÖ",
    other: "ÿ≥ÿß€åÿ±",
    subscribeNewsletter: "ÿπÿ∂Ÿà€åÿ™ ÿØÿ± ÿÆÿ®ÿ±ŸÜÿßŸÖŸá",
    receivePromotions: "ÿØÿ±€åÿßŸÅÿ™ Ÿæ€åÿ¥ŸÜŸáÿßÿØÿßÿ™ ÿ™ÿ®ŸÑ€åÿ∫ÿßÿ™€å",

    // Form actions
    previous: "ŸÇÿ®ŸÑ€å",
    next: "ÿ®ÿπÿØ€å",
    submitSurvey: "ÿßÿ±ÿ≥ÿßŸÑ ŸÜÿ∏ÿ±ÿ≥ŸÜÿ¨€å",
    submitting: "ÿØÿ± ÿ≠ÿßŸÑ ÿßÿ±ÿ≥ÿßŸÑ...",

    // Validation messages
    nameRequired: "ŸÜÿßŸÖ ÿßŸÑÿ≤ÿßŸÖ€å ÿßÿ≥ÿ™",
    emailRequired: "ÿß€åŸÖ€åŸÑ ÿßŸÑÿ≤ÿßŸÖ€å ÿßÿ≥ÿ™",
    emailInvalid: "ÿß€åŸÖ€åŸÑ ŸÜÿßŸÖÿπÿ™ÿ®ÿ± ÿßÿ≥ÿ™",
    visitFrequencyRequired: "ÿ™ÿπÿØÿØ ÿ®ÿßÿ≤ÿØ€åÿØ ÿßŸÑÿ≤ÿßŸÖ€å ÿßÿ≥ÿ™",
    ratingRequired: "ÿßŸÖÿ™€åÿßÿ≤ ÿßŸÑÿ≤ÿßŸÖ€å ÿßÿ≥ÿ™",
    feedbackRequired: "ÿß€åŸÜ ŸÅ€åŸÑÿØ ÿßŸÑÿ≤ÿßŸÖ€å ÿßÿ≥ÿ™",
    recommendationRequired: "ÿßŸÖÿ™€åÿßÿ≤ ÿ™Ÿàÿµ€åŸá ÿßŸÑÿ≤ÿßŸÖ€å ÿßÿ≥ÿ™",
    // Location & Contact translations
    getDirections: "ŸÖÿ≥€åÿ±€åÿßÿ®€å",
    openInGoogleMaps: "⁄ØŸà⁄ØŸÑ ŸÖŸæ",
    openInOSM: "ŸÜŸÇÿ¥Ÿá ÿ¢ÿ≤ÿßÿØ",
    coordinates: "ŸÖÿÆÿ™ÿµÿßÿ™",
    copyCoordinates: "ÿ®ÿ±ÿß€å ⁄©Ÿæ€å ŸÖÿÆÿ™ÿµÿßÿ™ ⁄©ŸÑ€å⁄© ⁄©ŸÜ€åÿØ",
    businessHours: "ÿ≥ÿßÿπÿßÿ™ ⁄©ÿßÿ±€å",
    monday: "ÿØŸàÿ¥ŸÜÿ®Ÿá",
    tuesday: "ÿ≥Ÿá‚Äåÿ¥ŸÜÿ®Ÿá",
    wednesday: "⁄ÜŸáÿßÿ±ÿ¥ŸÜÿ®Ÿá",
    thursday: "ŸæŸÜÿ¨‚Äåÿ¥ŸÜÿ®Ÿá",
    friday: "ÿ¨ŸÖÿπŸá",
    saturday: "ÿ¥ŸÜÿ®Ÿá",
    sunday: "€å⁄©ÿ¥ŸÜÿ®Ÿá",
    loading: "ÿØÿ± ÿ≠ÿßŸÑ ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å...",

    // Form translations (additional)
    surveySubmittedDesc: "Ÿæÿßÿ≥ÿÆ ÿ¥ŸÖÿß ÿ´ÿ®ÿ™ ÿ¥ÿØ Ÿà ÿ®Ÿá ÿ®Ÿáÿ®ŸàÿØ ÿÆÿØŸÖÿßÿ™ ŸÖÿß ⁄©ŸÖ⁄© ÿÆŸàÿßŸáÿØ ⁄©ÿ±ÿØ.",
    submitAnother: "ÿßÿ±ÿ≥ÿßŸÑ Ÿæÿßÿ≥ÿÆ ÿØ€å⁄Øÿ±",
    enterFavoriteItems: "ÿ¢€åÿ™ŸÖ‚ÄåŸáÿß€å ŸÖŸàÿ±ÿØ ÿπŸÑÿßŸÇŸá ÿÆŸàÿØ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ",
    selectOption: "€å⁄© ⁄Øÿ≤€åŸÜŸá ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ",

    // Appetizers Prices (same as English)
    crispyMozzarellaSticksPrice: "208T",
    buffaloWingsPrice: "133T",
    loadedNachosPrice: "170T",
    calamariRingsPrice: "84T",
    stuffedMushroomsPrice: "97.5T",
    garlicBreadPrice: "119T",

    // Main Courses Prices (same as English)
    grilledRibeyeSteakPrice: "310T",
    herbCrustedSalmonPrice: "306T",
    chickenParmesanPrice: "387T",
    lobsterRavioliPrice: "264T",
    bbqPorkRibsPrice: "216T",

    // Desserts Prices (same as English)
    chocolateLavaCakePrice: "320T",
    newYorkCheesecakePrice: "370T",

    // Beverages Prices (same as English)
    freshOrangeJuicePrice: "$4.99",
    icedCoffeePrice: "$3.99",
    fruitSmoothiePrice: "$5.99",

    // Salads Prices (same as English)
    caesarSaladPrice: "270T",

    // Soups Prices (same as English)
    tomatoBasilSoupPrice: "289T",
    chickenNoodleSoupPrice: "380T",

    // Chef Specialties Prices (same as English)
    wagyuBeefTenderloinPrice: "380T",
    duckConfitPrice: "220T",
    rackOfLambPrice: "220T",
    stuffedPortobelloPrice: "220T",
    surfAndTurfPrice: "260T",
    chefsTastingMenuPrice: "240T",
    ossobucoPrice: "180T",
    bouillabaissePrice: "190T",
    cobbSaladPrice: "230T",
nicoiseSaladPrice: "180T",

    // Default Items Prices (same as English)
    defaultItem1Price: "$12.99",
    defaultItem2Price: "$15.99",
    defaultItem3Price: "$18.99",
    defaultItem4Price: "$14.99",
    defaultItem5Price: "$16.99",
    defaultItem6Price: "$13.99",
    defaultItem7Price: "$17.99",
    defaultItem8Price: "$19.99",
     // Size labels
    small: "⁄©Ÿà⁄Ü⁄©",
    large: "ÿ®ÿ≤ÿ±⁄Ø",
    unavailable: "ÿßÿ™ŸÖÿßŸÖ ŸÖŸàÿ¨ŸàÿØ€å",
    

    
    // Seafood prices (with sizes)
    grilledLobsterTailPriceSmall: "290T",
    grilledLobsterTailPriceLarge: "405T",
    panSearedScallopsPriceSmall: "326T",
    panSearedScallopsPriceLarge: "416T",
    fishAndChipsPriceSmall: "305T",
    fishAndChipsPriceLarge: "420T",
    seafoodPaellaPriceSmall: "220T",
    seafoodPaellaPriceLarge: "301T",
    blackenedMahiMahiPriceSmall: "185T",
    blackenedMahiMahiPriceLarge: "234T",
    crabCakesPriceSmall: "162T",
    crabCakesPriceLarge: "266T",
    salmonTeriyakiPriceSmall: "143T",
    salmonTeriyakiPriceLarge: "198T",
    shrimpScampiPriceSmall: "170T",
    shrimpScampiPriceLarge: "296T",

    // Original Price Translation Keys and Values
crispyMozzarellaSticksOriginalPrice: "260T",
buffaloWingsOriginalPrice: "190T",
loadedNachosOriginalPrice: "$15.99",
garlicBreadOriginalPrice: "119T",
calamariRingsOriginalPrice: "140T",
stuffedMushroomsOriginalPrice: "$15.99",
grilledRibeyeSteakOriginalPrice: "$15.99",
herbCrustedSalmonOriginalPrice: "340T",
chickenParmesanOriginalPrice: "430T",
lobsterRavioliOriginalPrice: "$330T",
bbqPorkRibsOriginalPrice: "360T",
chocolateLavaCakeOriginalPrice: "$15.99",
newYorkCheesecakeOriginalPrice: "$8.99",
freshOrangeJuiceOriginalPrice: "$15.99",
icedCoffeeOriginalPrice: "$15.99",
fruitSmoothieOriginalPrice: "$7.99",
caesarSaladOriginalPrice: "$15.99",
tomatoBasilSoupOriginalPrice: "340T",
chickenNoodleSoupOriginalPrice: "400T",
grilledLobsterTailOriginalPriceSmall: "$28.99",
grilledLobsterTailOriginalPriceLarge: "450T",
panSearedScallopsOriginalPriceSmall: "326T",
panSearedScallopsOriginalPriceLarge: "520T",
fishAndChipsOriginalPriceSmall: "$18.99",
fishAndChipsOriginalPriceLarge: "600T",
seafoodPaellaOriginalPriceSmall: "$32.99",
seafoodPaellaOriginalPriceLarge: "430T",
blackenedMahiMahiOriginalPriceSmall: "185T",
blackenedMahiMahiOriginalPriceLarge: "390T",
crabCakesOriginalPriceSmall: "$24.99",
crabCakesOriginalPriceLarge: "$380T",
salmonTeriyakiOriginalPriceSmall: "143T",
salmonTeriyakiOriginalPriceLarge: "330T",
shrimpScampiOriginalPriceSmall: "$22.99",
shrimpScampiOriginalPriceLarge: "370T",
wagyuBeefTenderloinOriginalPrice: "$15.99",
duckConfitOriginalPrice: "220T",
rackOfLambOriginalPrice: "220T",
stuffedPortobelloOriginalPrice: "220T",
surfAndTurfOriginalPrice: "260T",
chefsTastingMenuOriginalPrice: "$15.99",
ossobucoOriginalPrice: "$15.99",
bouillabaisseOriginalPrice: "190T",
cobbSaladOriginalPrice: "230T",
nicoiseSaladOriginalPrice: "$15.99"

    
  },
  
};

const LanguageContext = createContext<LanguageContextType | undefined>(
  undefined
);

export const LanguageProvider: React.FC<{ children: ReactNode }> = ({
  children,
}) => {
  const [language, setLanguage] = useState<Language>("en");

  useEffect(() => {
    // Load saved language from localStorage
    const savedLanguage = localStorage.getItem("language") as Language;
    if (savedLanguage && (savedLanguage === "en" || savedLanguage === "fa")) {
      setLanguage(savedLanguage);
    }
  }, []);

  useEffect(() => {
    // Save language to localStorage and update document direction
    localStorage.setItem("language", language);
    document.documentElement.dir = language === "fa" ? "rtl" : "ltr";
    document.documentElement.lang = language;
  }, [language]);

  const isRTL = language === "fa";

  const t = (key: string): string => {
    return (
      translations[language][
        key as keyof (typeof translations)[typeof language]
      ] || key
    );
  };

  return (
    <LanguageContext.Provider value={{ language, setLanguage, isRTL, t }}>
      {children}
    </LanguageContext.Provider>
  );
};

export const useLanguage = (): LanguageContextType => {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error("useLanguage must be used within a LanguageProvider");
  }
  return context;
};
